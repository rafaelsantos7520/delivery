generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Admin {
  id           String   @id @default(uuid())
  name         String
  login        String   @unique
  passwordHash String   @map("password_hash")
  active       Boolean  @default(true)
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("admins")
}

model Customer {
  id        String   @id @default(uuid())
  name      String
  phone     String
  createdAt DateTime @default(now()) @map("created_at")
  address   Json?
  orders    Order[]

  @@map("customers")
}

model Product {
  id               String              @id @default(cuid())
  name             String
  description      String?
  imageUrl         String?             @map("image_url")
  active           Boolean             @default(true)
  createdAt        DateTime            @default(now()) @map("created_at")
  categoryId       String?             @map("category_id")
  orderItems       OrderItem[]
  complements      ProductComplement[]
  variations       ProductVariation[]
  categoryRelation Category?           @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("products")
}

model ProductVariation {
  id                  String      @id @default(uuid())
  productId           String      @map("product_id")
  name                String
  basePrice           Float       @map("base_price")
  includedComplements Int         @map("included_complements")
  includedFruits      Int         @map("included_fruits")
  createdAt           DateTime    @default(now()) @map("created_at")
  includedCoverages   Int         @default(0) @map("included_coverages")
  orderItems          OrderItem[]
  product             Product     @relation(fields: [productId], references: [id])

  @@map("product_variations")
}

model Complement {
  id                   String                @id @default(uuid())
  name                 String
  extraPrice           Float                 @map("extra_price")
  included             Boolean               @default(true)
  imageUrl             String?               @map("image_url")
  active               Boolean               @default(true)
  createdAt            DateTime              @default(now()) @map("created_at")
  type                 ComplementType
  orderItemComplements OrderItemComplement[]
  productComplements   ProductComplement[]

  @@map("complements")
}

model ProductComplement {
  id           String     @id @default(uuid())
  productId    String     @map("product_id")
  complementId String     @map("complement_id")
  active       Boolean    @default(true)
  complement   Complement @relation(fields: [complementId], references: [id])
  product      Product    @relation(fields: [productId], references: [id])

  @@unique([productId, complementId])
  @@map("product_complements")
}

model Order {
  id              String      @id @default(uuid())
  customerId      String      @map("customer_id")
  status          String      @default("pending")
  whatsappMessage String?     @map("whatsapp_message")
  total           Float       @default(0)
  createdAt       DateTime    @default(now()) @map("created_at")
  items           OrderItem[]
  customer        Customer    @relation(fields: [customerId], references: [id])

  @@map("orders")
}

model OrderItem {
  id          String                @id @default(uuid())
  orderId     String                @map("order_id")
  productId   String                @map("product_id")
  variationId String?               @map("variation_id")
  note        String?
  finalPrice  Float                 @map("final_price")
  createdAt   DateTime              @default(now()) @map("created_at")
  complements OrderItemComplement[]
  order       Order                 @relation(fields: [orderId], references: [id])
  product     Product               @relation(fields: [productId], references: [id])
  variation   ProductVariation?     @relation(fields: [variationId], references: [id])

  @@map("order_items")
}

model OrderItemComplement {
  id           String                  @id @default(uuid())
  orderItemId  String                  @map("order_item_id")
  complementId String                  @map("complement_id")
  price        Float
  quantity     Int                     @default(1)
  type         OrderItemComplementType
  complement   Complement              @relation(fields: [complementId], references: [id])
  orderItem    OrderItem               @relation(fields: [orderItemId], references: [id])

  @@map("order_item_complements")
}

model Category {
  id          String    @id @default(dbgenerated("gen_random_uuid()"))
  name        String    @unique @db.VarChar(255)
  description String?
  createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  products    Product[]

  @@map("categories")
}

enum ComplementType {
  ACOMPANHAMENTO
  FRUTA
  COBERTURA
}

enum OrderItemComplementType {
  INCLUDED
  EXTRA
}
